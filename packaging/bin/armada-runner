#!/bin/bash

BASE=armada

# modify these in /etc/default/$BASE (/etc/default/armada)
ARMADA_CONTAINERID_FILE=/var/run/$BASE.pid
ARMADA_LOGFILE=/var/log/armada/$BASE-runner.log
ARMADA_LOCK_FILE=/var/lock/subsys/$BASE
ARMADA_DESC="armada"
ARMADA_PORT=8900
ARMADA_VERSION='latest'

RESTRICT_CUSTOM_CONFIG_DIRS=/

DOCKER_PID_FILE='/var/run/docker.pid'

PATH=$PATH:/usr/local/bin

log_message() {
    current_time=$(date "+%Y-%m-%d %H:%M:%S")
    echo $1
    echo "[${current_time}] $1" >> ${ARMADA_LOGFILE}
}

if [ -f /etc/default/$BASE ]; then
    . /etc/default/$BASE
fi

if [ -f /opt/armada/version ]; then
    . /opt/armada/version
fi


notify() {
    echo "${1}"
    systemctl --version > /dev/null 2>&1
    if [ $? == 0 ]; then
        systemd-notify "${1}"
    fi
}

set_external_ip() {
    # determine network interface for empty config
    if [[ -z "$default_interface" ]]; then
        log_message "WARNING: Armada is starting without default interface setup in /etc/default/armada. Armada will try to detect best network interface automatically. Please configure default interface to disable this feature."
        default_interface=$( ip r |  awk '/^default/{print $5}' )
        # if there is only one lo interface available
        if [[ -z "$default_interface" ]]; then
            default_interface='lo'
        fi
    fi  
    # check if interface really exists
    if [[ "$default_interface" != "lo" ]] && ! ( ip r | grep $default_interface -wq ); then 
        log_message "ERROR: Interface $default_interface is unplugged or misspelled. Check your devices or change default settings in /etc/default/armada (default_interface=YOUR_INTERFACE_NAME) or comment it to enable autodetection."; 
        exit 1; 
    fi
    # reading ip address
    external_ip=$( ip address show $default_interface 2>&1 | awk '/inet/&&!/inet6/{split($2,a,"/");print a[1]}' )
    # check ip format
    if [[ -z "$( echo $external_ip | awk '{match($0,/[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/);ip=substr($0,RSTART,RLENGTH);print ip}')" ]]; then
        log_message "ERROR: Wrong ip format -> \"$external_ip\". Maybe ip command problem." 
        exit 1
    fi
    log_message "Binding this network device: $default_interface/$external_ip"
}

# Check if docker is present and available.
fail_unless_can_run_docker() {
    if [ "$(id -u)" != '0' ]; then
        log_message "${ARMADA_DESC} must be run as root"
        exit 1
    fi

    docker info > /dev/null 2>&1
    if [ $? != 0 ]; then
        log_message "Cannot run 'docker' command. Is docker installed and running?"
        exit 1
    fi
}

fail_if_armada_is_running() {
    armada_containerid=$(cat "${ARMADA_CONTAINERID_FILE}" 2>/dev/null)
    if [ -n "${armada_containerid}" ]; then
        docker inspect ${armada_containerid} > /dev/null 2>&1
        if [ "$?" == "0" ]; then
            echo "Container ID file found: ${ARMADA_CONTAINERID_FILE} Remove it before restarting armada."
            exit 1
        fi
    fi
    rm -f "${ARMADA_CONTAINERID_FILE}" 2>/dev/null
}

wait_for_armada_running() {
    notify --status="Waiting for ${ARMADA_DESC} running state..."
    set_external_ip
    wait_timeout=30
    is_armada_running=0
    while [ ${is_armada_running} != "1" ] && [ ${wait_timeout} -gt 0 ]; do
        sleep 1
        is_armada_running=$(armada info 2>/dev/null | grep passing | awk '{split($4,a,":"); print a[1]}' | grep "^${external_ip}$" | wc -l)
        wait_timeout=$[wait_timeout - 1]
    done

    if [ ${wait_timeout} -le 0 ]; then
        notify --status="Waiting for ${ARMADA_DESC} running state timed out :("
        exit 1
    fi

    touch ${ARMADA_LOCK_FILE} 2>/dev/null
    notify --status="${ARMADA_DESC} is running"
}

stop_armada() {
    armada_containerid=$(cat "${ARMADA_CONTAINERID_FILE}" 2>/dev/null)
    if [ -n "${armada_containerid}" ]; then
        docker inspect ${armada_containerid} > /dev/null 2>&1
        if [ $? == 0 ]; then
            armada shutdown --keep-joined
            docker rm -f ${armada_containerid}
        fi
    fi
    rm -f "${ARMADA_CONTAINERID_FILE}" 2>/dev/null
    rm -f "${ARMADA_LOCK_FILE}" 2>/dev/null
    notify --status="${ARMADA_DESC} has been stopped"
}

docker_server_version() {
    echo $(docker version | grep -i server -A1 | grep -i version | head -n1 | cut -d: -f2)
}

get_static_docker_client_if_missing() {
    python /opt/armada/docker_compatibility.py cache-client
}

get_docker_start_timestamp() {
    docker_pid=$(cat ${DOCKER_PID_FILE})
    date -d "$(ps -p $docker_pid -o lstart=)" +'%s'
}

remove_services() {
    ship_name=$(armada info 2>/dev/null | grep '\->' | awk '{print $2}')
    ship_ip=$(armada info 2>/dev/null | grep '\->' | awk '{split($4,a,":"); print a[1]}')
    if [ "$ship_name" == "armada" ]; then
        ship_name=$ship_ip
    fi
    services=$(curl -s "${ship_ip}:8500/v1/kv/ships/${ship_name}/service/?keys" | python -c 'import sys, json; print " ".join(json.load(sys.stdin))')
    for service in $services
    do
        curl -s -X DELETE "${ship_ip}:8500/v1/kv/$service" > /dev/null
    done
    curl -s -X DELETE "${ship_ip}:8500/v1/kv/containers_parameters_list/${ship_name}" > /dev/null
}

case "$1" in
    start)
        fail_unless_can_run_docker

        touch "${ARMADA_LOGFILE}"
        log_message "Starting ${ARMADA_DESC}..."

        fail_if_armada_is_running

        set_external_ip

        docker_start_timestamp=$(get_docker_start_timestamp)

        get_static_docker_client_if_missing

        docker_version=$(docker_server_version)

        run_options="-d \
            --cidfile ${ARMADA_CONTAINERID_FILE} \
            -p 2201:22 \
            -p ${ARMADA_PORT}:80 \
            -p 8300:8300 -p 8301:8301 -p 8301:8301/udp \
            -p 8400:8400 -p 8500:8500 \
            -v /opt/armada:/opt/armada \
            -v /etc/opt:/etc/opt \
            -v /opt/armada-docker-client/docker-$docker_version:/usr/bin/docker \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v /etc/default/armada:/etc/default/armada \
            -v ${RESTRICT_CUSTOM_CONFIG_DIRS}:/configs:ro \
            -e SHIP_EXTERNAL_IP=${external_ip} \
            -e MICROSERVICE_NAME=armada \
            -e DOCKER_START_TIMESTAMP=${docker_start_timestamp} \
            -e RESTRICT_CUSTOM_CONFIG_DIRS=${RESTRICT_CUSTOM_CONFIG_DIRS}"

        if [ "${privileged,,}" == "true" ]; then
            run_options+=" --privileged=true"
        fi

        if [ "${ARMADA_AUTORELOAD}" == "1" ]; then
            run_options+=" -v /opt/armada-src/:/opt/armada-docker/ -e ARMADA_AUTORELOAD=1"
        else
            run_options+=" -e ARMADA_AUTORELOAD=0"
        fi

        docker run $run_options "armada:${ARMADA_VERSION}" >> "${ARMADA_LOGFILE}" 2>&1

        if [ $? != 0 ]; then
            echo "Error! Couldn't start Armada's container. Check ${ARMADA_LOGFILE} for details."
            exit 1
        fi

        # Fix for unreliable UDP connection among ships. https://github.com/hashicorp/consul/issues/352
        conntrack -F

        wait_for_armada_running
        ;;

    stop)
        fail_unless_can_run_docker
        log_message "Stopping ${ARMADA_DESC}..."
        stop_armada
        ;;

    shutdown)
        fail_unless_can_run_docker
        log_message "Stopping ${ARMADA_DESC}..."
        remove_services
        stop_armada

        rm -f /opt/armada/runtime_settings.json
        ;;

    restart)
        fail_unless_can_run_docker
        log_message "Stopping ${ARMADA_DESC}..."
        stop_armada

        $0 start
        code=$?
        if [ $code -ne 0 ]; then
            exit $code
        fi
        ;;

    force-reload)
        fail_unless_can_run_docker
        $0 restart
        ;;

    status)
        armada_containerid=$(cat "${ARMADA_CONTAINERID_FILE}" 2>/dev/null)
        if [ ! -n "${armada_containerid}" ]; then
            echo ${ARMADA_DESC} is not running.
            exit 1
        fi

        docker inspect ${armada_containerid} > /dev/null 2>&1
        if [ $? != 0 ]; then
            echo ${ARMADA_DESC} is not running. Wrong container id in file ${ARMADA_CONTAINERID_FILE}.
            exit 1
        fi

        echo ${ARMADA_DESC} is running.
        ;;

    *)
        echo "Usage: $0 {start|stop|restart|status|shutdown}"
        exit 1
        ;;
esac

exit 0
